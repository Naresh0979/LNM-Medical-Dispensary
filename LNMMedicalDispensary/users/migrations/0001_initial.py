# Generated by Django 3.2.8 on 2021-12-22 17:07

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('Aid', models.AutoField(primary_key=True, serialize=False)),
                ('Timings', models.CharField(max_length=20)),
                ('mailid', models.CharField(max_length=20)),
                ('isApproved', models.BooleanField(default=True, verbose_name='IsApproved')),
            ],
        ),
        migrations.CreateModel(
            name='Chemist',
            fields=[
                ('Uid', models.UUIDField(editable=False, null=True)),
                ('Cid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('age', models.IntegerField()),
                ('phonenumber', models.BigIntegerField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('Uid', models.UUIDField(editable=False, null=True)),
                ('Did', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
                ('address', models.TextField()),
                ('schedule', models.TextField()),
                ('speciality', models.CharField(max_length=20)),
                ('phonenumber', models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('Mid', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=50)),
                ('Type', models.CharField(max_length=50)),
                ('Quantity', models.IntegerField(default=1000)),
                ('Usage', models.IntegerField(default=0)),
                ('Supplier', models.CharField(max_length=30)),
                ('PurchaseDate', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('ExpiryDate', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('Pid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('age', models.IntegerField()),
                ('phonenumber', models.BigIntegerField(blank=True, null=True)),
                ('Uid', models.UUIDField(editable=False, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='PatientHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Description', models.TextField()),
                ('Aid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.appointment')),
                ('Pid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicineIssued',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('prescription', models.TextField()),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('medicine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.medicine')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Medicalcertificate',
            fields=[
                ('medicalID', models.AutoField(primary_key=True, serialize=False)),
                ('reason', models.TextField()),
                ('fromdate', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('todate', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('feedbackID', models.AutoField(primary_key=True, serialize=False)),
                ('feedback', models.TextField()),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.doctor')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.patient')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='Did',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.doctor'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='Pid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.patient'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(default=20)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1)),
                ('Uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('phonenumber', models.BigIntegerField(blank=True, null=True)),
                ('is_doctor', models.BooleanField(default=False, verbose_name='Is doctor')),
                ('patient', models.BooleanField(default=False, verbose_name='Is patient')),
                ('is_chemist', models.BooleanField(default=False, verbose_name='Is chemist')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
